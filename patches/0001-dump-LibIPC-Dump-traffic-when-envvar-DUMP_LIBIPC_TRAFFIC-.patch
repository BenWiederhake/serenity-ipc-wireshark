From 8ee21ce348edae3f14301da0b0c144913262d184 Mon Sep 17 00:00:00 2001
From: Ben Wiederhake <BenWiederhake.GitHub@gmx.de>
Date: Thu, 25 May 2023 23:27:34 +0200
Subject: [PATCH 1/4] LibIPC: Dump traffic when envvar DUMP_LIBIPC_TRAFFIC is
 set

---
 Userland/Libraries/LibIPC/CMakeLists.txt  |   1 +
 Userland/Libraries/LibIPC/Connection.cpp  |   9 ++
 Userland/Libraries/LibIPC/Connection.h    |   9 ++
 Userland/Libraries/LibIPC/TrafficDump.cpp | 117 ++++++++++++++++++++++
 Userland/Libraries/LibIPC/TrafficDump.h   |  51 ++++++++++
 5 files changed, 187 insertions(+)
 create mode 100644 Userland/Libraries/LibIPC/TrafficDump.cpp
 create mode 100644 Userland/Libraries/LibIPC/TrafficDump.h

diff --git a/Userland/Libraries/LibIPC/CMakeLists.txt b/Userland/Libraries/LibIPC/CMakeLists.txt
index 10f754902a..251667f9cc 100644
--- a/Userland/Libraries/LibIPC/CMakeLists.txt
+++ b/Userland/Libraries/LibIPC/CMakeLists.txt
@@ -2,6 +2,7 @@ set(SOURCES
     Connection.cpp
     Decoder.cpp
     Encoder.cpp
+    TrafficDump.cpp
 )
 
 serenity_lib(LibIPC ipc)
diff --git a/Userland/Libraries/LibIPC/Connection.cpp b/Userland/Libraries/LibIPC/Connection.cpp
index d17e7bdebb..f83983c795 100644
--- a/Userland/Libraries/LibIPC/Connection.cpp
+++ b/Userland/Libraries/LibIPC/Connection.cpp
@@ -25,6 +25,7 @@ struct CoreEventLoopDeferredInvoker final : public DeferredInvoker {
 ConnectionBase::ConnectionBase(IPC::Stub& local_stub, NonnullOwnPtr<Core::LocalSocket> socket, u32 local_endpoint_magic)
     : m_local_stub(local_stub)
     , m_socket(move(socket))
+    , m_traffic_dump(TrafficDump::create_if_requested(m_local_stub))
     , m_local_endpoint_magic(local_endpoint_magic)
     , m_deferred_invoker(make<CoreEventLoopDeferredInvoker>())
 {
@@ -55,6 +56,14 @@ ErrorOr<void> ConnectionBase::post_message(Message const& message)
 
 ErrorOr<void> ConnectionBase::post_message(MessageBuffer buffer)
 {
+    if (m_traffic_dump.has_value()) {
+        auto maybe_error = m_traffic_dump->notify_outgoing_message(buffer);
+        if (maybe_error.is_error()) {
+            dbgln("WARNING: IPC traffic-dumping aborted due to error: {}", maybe_error.error());
+            m_traffic_dump.clear();
+        }
+    }
+
     // NOTE: If this connection is being shut down, but has not yet been destroyed,
     //       the socket will be closed. Don't try to send more messages.
     if (!m_socket->is_open())
diff --git a/Userland/Libraries/LibIPC/Connection.h b/Userland/Libraries/LibIPC/Connection.h
index 42dc247d30..64d11d7e2c 100644
--- a/Userland/Libraries/LibIPC/Connection.h
+++ b/Userland/Libraries/LibIPC/Connection.h
@@ -16,6 +16,7 @@
 #include <LibCore/Timer.h>
 #include <LibIPC/Forward.h>
 #include <LibIPC/Message.h>
+#include <LibIPC/TrafficDump.h>
 #include <errno.h>
 #include <stdint.h>
 #include <stdio.h>
@@ -71,6 +72,7 @@ protected:
 
     NonnullOwnPtr<Core::LocalSocket> m_socket;
     OwnPtr<Core::LocalSocket> m_fd_passing_socket;
+    Optional<TrafficDump> m_traffic_dump;
 
     RefPtr<Core::Timer> m_responsiveness_timer;
 
@@ -137,6 +139,13 @@ protected:
                 break;
             index += sizeof(message_size);
             auto remaining_bytes = ReadonlyBytes { bytes.data() + index, message_size };
+            if (m_traffic_dump.has_value()) {
+                auto maybe_error = m_traffic_dump->notify_incoming_message(remaining_bytes);
+                if (maybe_error.is_error()) {
+                    dbgln("WARNING: IPC traffic-dumping aborted due to error: {}", maybe_error.error());
+                    m_traffic_dump.clear();
+                }
+            }
 
             auto local_message = LocalEndpoint::decode_message(remaining_bytes, fd_passing_socket());
             if (!local_message.is_error()) {
diff --git a/Userland/Libraries/LibIPC/TrafficDump.cpp b/Userland/Libraries/LibIPC/TrafficDump.cpp
new file mode 100644
index 0000000000..47a529e1d6
--- /dev/null
+++ b/Userland/Libraries/LibIPC/TrafficDump.cpp
@@ -0,0 +1,117 @@
+/*
+ * Copyright (c) 2023, Ben Wiederhake <BenWiederhake.GitHub@gmx.de>
+ *
+ * SPDX-License-Identifier: BSD-2-Clause
+ */
+
+#include <AK/Endian.h>
+#include <AK/ScopeGuard.h>
+#include <AK/String.h>
+#include <AK/Time.h>
+#include <LibCore/File.h>
+#include <LibIPC/Stub.h>
+#include <LibIPC/TrafficDump.h>
+#include <stdlib.h>
+
+namespace IPC {
+
+Optional<TrafficDump> TrafficDump::create_if_requested(Stub const& stub)
+{
+    if (!getenv("DUMP_LIBIPC_TRAFFIC")) {
+        return {};
+    }
+    // This method is being called from the constructor of `ConnectionBase`.
+    // However, most classes haphazardly just derive from *all* IPC classes.
+    // Consider LibConfig's Config::Client. In its constructor, it passes `*this` as `ClientStub&` to
+    // ConnectionToServer, which eventually calls the constructor of `ConnectionBase`, which in turn calls us.
+    // However, since the constructor of `Config::Client` hasn't completed yet, this means that the vtables
+    // aren't complete yet, and instead are in a weird intermediate state.
+    // Therefore, we don't access any methods just yet, and instead do the initialization lazily.
+    return TrafficDump(&stub);
+}
+
+static Array PCAP_MAGIC_HEADER = {
+    0xA1B2C3D4, // Magic value to indicate pcap file format, version, endianess, and timestamp format.
+    0x00400020, // Version
+    0x00000000, // Pointless timestamp (ignored anyway)
+    0x00000000, // Second pointless timestamp (ignored anyway)
+    0x00400000, // "snaplen", I guess the largest possible packet size? FIXME: Clarify
+    0x000000a0, // "linktype", let's use LINKTYPE_USER13=0xa0 to avoid collisions.
+};
+
+ErrorOr<void> TrafficDump::lazy_init_if_necessary()
+{
+    if (m_file.has<NonnullOwnPtr<Core::File>>())
+        return {};
+    Stub const& stub = *m_file.get<Stub const*>();
+
+    // Open a file with a nice filename for writing:
+    auto now = UnixDateTime::now();
+    auto filename_pattern = DeprecatedString::formatted(
+        "/tmp/{}_pid{}_t{}_XXXXXX.pcap"sv,
+        stub.name(),
+        getpid(),
+        now.truncated_seconds_since_epoch());
+    // FIXME: Core::System::mkstemp is terrible to use!
+    int file_fd = mkstemps(const_cast<char*>(filename_pattern.characters()), 5);
+    if (file_fd < 0)
+        return Error::from_syscall("mkstemp"sv, -errno);
+    ArmedScopeGuard close_fd_guard { [&] {
+        close(file_fd);
+    } };
+    m_file = TRY(Core::File::adopt_fd(file_fd, Core::File::OpenMode::Write));
+    close_fd_guard.disarm();
+    // Note that we overwrote parts of filename_pattern during mkstemp!
+    dbgln("Will dump all traffic to and from {} into file {}", stub.name(), filename_pattern);
+
+    // Write the pcap header:
+    for (u32 value : PCAP_MAGIC_HEADER) {
+        // TODO: Optimize these many writes into a single one.
+        TRY(write_u32(value));
+    }
+
+    return {};
+}
+
+ErrorOr<void> TrafficDump::write_u32(u32 value)
+{
+    LittleEndian<u32> value_le { value };
+    static_assert(sizeof(value_le) == sizeof(u32));
+    return m_file.get<NonnullOwnPtr<Core::File>>()->write_until_depleted({ &value_le, sizeof(value_le) });
+}
+
+ErrorOr<void> TrafficDump::notify_message(AK::ReadonlyBytes bytes, Direction direction)
+{
+    // TODO: Optimize these many writes into a single one.
+
+    // timeval (u32 sec, u32 usec)
+    auto now = UnixDateTime::now().to_timeval();
+    TRY(write_u32(now.tv_sec));
+    TRY(write_u32(now.tv_usec));
+
+    // Length must effectively be provided twice.
+    TRY(write_u32(4 + bytes.size()));
+    TRY(write_u32(4 + bytes.size()));
+
+    // Direction. The enum already is compatible with the Wireshark internal values.
+    TRY(write_u32(static_cast<u32>(direction)));
+
+    // And finally, the data themselves.
+    TRY(m_file.get<NonnullOwnPtr<Core::File>>()->write_until_depleted(bytes));
+
+    return {};
+}
+
+ErrorOr<void> TrafficDump::notify_outgoing_message(MessageBuffer const& message_buffer)
+{
+    TRY(lazy_init_if_necessary());
+    return notify_message(message_buffer.data, Direction::P2P_DIR_SENT);
+}
+
+ErrorOr<void> TrafficDump::notify_incoming_message(ReadonlyBytes buffer)
+{
+    TRY(lazy_init_if_necessary());
+    return notify_message(buffer, Direction::P2P_DIR_RECV);
+}
+
+}
diff --git a/Userland/Libraries/LibIPC/TrafficDump.h b/Userland/Libraries/LibIPC/TrafficDump.h
new file mode 100644
index 0000000000..a10a1ede59
--- /dev/null
+++ b/Userland/Libraries/LibIPC/TrafficDump.h
@@ -0,0 +1,51 @@
+/*
+ * Copyright (c) 2023, Ben Wiederhake <BenWiederhake.GitHub@gmx.de>
+ *
+ * SPDX-License-Identifier: BSD-2-Clause
+ */
+
+#pragma once
+
+#include <AK/ByteBuffer.h>
+#include <AK/Noncopyable.h>
+#include <AK/Try.h>
+#include <AK/Variant.h>
+#include <LibCore/File.h>
+#include <LibIPC/Forward.h>
+#include <LibIPC/Message.h>
+
+namespace IPC {
+
+class TrafficDump {
+    AK_MAKE_NONCOPYABLE(TrafficDump);
+
+public:
+    static Optional<TrafficDump> create_if_requested(Stub const&);
+
+    TrafficDump(TrafficDump&&) = default;
+    TrafficDump& operator=(TrafficDump&&) = default;
+    ~TrafficDump() = default;
+
+    ErrorOr<void> notify_outgoing_message(MessageBuffer const&);
+    // FIXME: Also log fds and their content maybe?
+    ErrorOr<void> notify_incoming_message(ReadonlyBytes);
+
+private:
+    enum class Direction : u32 {
+        P2P_DIR_SENT = 0,
+        P2P_DIR_RECV = 1,
+    };
+    ErrorOr<void> lazy_init_if_necessary();
+    ErrorOr<void> notify_message(AK::ReadonlyBytes, Direction);
+
+    explicit TrafficDump(Stub const* stub)
+        : m_file(stub)
+    {
+    }
+
+    ErrorOr<void> write_u32(u32);
+
+    Variant<Stub const*, NonnullOwnPtr<Core::File>> m_file;
+};
+
+}
-- 
2.43.0

